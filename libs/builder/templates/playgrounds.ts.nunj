// @ts-nocheck
import {NgModule, Component, ViewChild, Type, ViewContainerRef} from '@angular/core';
import {NgDocBasePlayground, providePlaygroundDemo} from '@ng-doc/app';
// noinspection ES6UnusedImports
import pageDependencies from '{{ dependencies.importPath }}'; import {CommonModule} from '@angular/common';

{% set components = [] -%}
{%- set index = 1 %}

{%- for id in dependencies.playgroundIds -%}
{%- set playgrounds = dependencies.getPlaygroundsExpression() %}
{%- set target = playgrounds | getTargetForPlayground(id) %}
{%- set template = playgrounds | getTemplateForPlayground(id) %}
{%- set content = playgrounds | getContentForPlayground(id) %}

	{%- if target %}
	{%- set selectors = target | extractSelectors %}

		{%- for selector in selectors %}
			{%- set comp = {id: id, name: 'PlaygroundComponent' + index, selector: selector } %}
			{%- set components = (components.push(comp), components) %}

@Component({
	selector: 'ng-doc-playground-{{ index }}',
	template: `
		{{template | buildPlaygroundDemoTemplate(selector, content) }}
	`,
})
export class {{ comp.name }} extends NgDocBasePlayground {
	static readonly selector: string = '{{ comp.selector }}';

	@ViewChild(pageDependencies.playgrounds['{{ id }}'].target, {static: true})
	readonly playground?: Type<unknown>;

	@ViewChild(pageDependencies.playgrounds['{{ id }}'].target, {static: true, read: ViewContainerRef})
	readonly viewContainerRef: ViewContainerRef;

	data: any = pageDependencies.playgrounds['{{ id }}'].data;

	constructor() {
		super();
	}
}
			{%- set index = index + 1 -%}
		{%- endfor %}
	{%- endif %}
{%- endfor %}

@NgModule({
	imports: [
		CommonModule,
		pageDependencies.module,
	],
	declarations: [
		{%- for comp in components %}
		{{ comp.name }},
		{%- endfor %}
	],
	providers: [
		{%- for comp in components %}
		providePlaygroundDemo('{{ comp.id }}', {{ comp.name }}),
		{%- endfor %}
	],
	exports: [
		{%- for comp in components %}
		{{ comp.name }},
		{%- endfor %}
	],
})
export class PlaygroundsModule {
}
