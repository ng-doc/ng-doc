// @ts-nocheck
import {ChangeDetectionStrategy, Component, NgModule, Type, ViewChild, ViewContainerRef} from '@angular/core';
import {NgDocBasePlayground, providePlaygroundDemo} from '@ng-doc/app';
// noinspection ES6UnusedImports
import pageEntity from '{{ page.importPath }}';
import {CommonModule} from '@angular/common';

{%- set components = [] %}
{%- set index = 1 %}
{%- set playgrounds = page.playgroundMetadata %}


{%- for id, metadata in playgrounds -%}

{%- for selector, template in metadata.templateForComponents %}
{%- set comp = {id: id, name: 'PlaygroundComponent' + index, selector: selector } %}
{%- set components = (components.push(comp), components) %}

@Component({
	selector: 'ng-doc-playground-{{ index }}',
	template: `
		{{ template }}
	`,
	changeDetection: ChangeDetectionStrategy.OnPush,
})
export class {{ comp.name }} extends NgDocBasePlayground {
	static readonly selector: string = '{{ comp.selector }}';

	@ViewChild(pageEntity.playgrounds['{{ id }}'].target, {static: true})
	readonly playground?: Type<unknown>;

	@ViewChild(pageEntity.playgrounds['{{ id }}'].target, {static: true, read: ViewContainerRef})
	readonly viewContainerRef: ViewContainerRef;

	data: any = pageEntity.playgrounds['{{ id }}'].data;

	constructor() {
		super();
	}
}
{%- set index = index + 1 -%}
{%- endfor %}
{%- endfor %}

@NgModule({
	imports: [
		CommonModule,
		{%- if page.hasImports %}
		...pageEntity.imports,
		{%- endif %}
		{%- for id, metadata in playgrounds -%}
		{%- if metadata.standalone %}
		pageEntity.playgrounds['{{ id }}'].target,
		{%- endif %}
		{%- endfor %}
	],
	declarations: [
		{%- for comp in components %}
		{{ comp.name }},
		{%- endfor %}
	],
	providers: [
		{%- for comp in components %}
		providePlaygroundDemo('{{ comp.id }}', {{ comp.name }}),
		{%- endfor %}
	],
	exports: [
		{%- for comp in components %}
		{{ comp.name }},
		{%- endfor %}
	],
})
export class PlaygroundsModule {
}
