// @ts-nocheck
import {Component, NgModule, Type, ChangeDetectionStrategy} from '@angular/core';
import {RouterModule} from '@angular/router';
import {CommonModule} from '@angular/common';
import {NgDocPageModule, NgDocRootPage, NgDocDemoAssets} from '@ng-doc/app';
import {NgDocDependencies, NgDocPageType} from '@ng-doc/core';
import pageContent from '!!raw-loader!{{ page.builtPagePath }}';
{%- if page.pageDependencies %}
// noinspection ES6UnusedImports
import {PlaygroundsModule} from './playgrounds';
import pageDependencies from '{{ page.pageDependencies.importPath }}';
{%- endif %}
{%- if page.componentsAssets %}
// noinspection ES6UnusedImports
import demoAssets from '{{ page.componentsAssets }}';
{%- endif %}


@Component({
	template: `<ng-doc-page></ng-doc-page>`,
	changeDetection: ChangeDetectionStrategy.OnPush,
	providers: [{provide: NgDocRootPage, useExisting: DynamicComponent}],
})
export class DynamicComponent extends NgDocRootPage {
	readonly routePrefix: string = '{{ page.context.config.routePrefix }}';
	readonly pageType: NgDocPageType = 'guide';
	readonly pageContent: string = pageContent;

	{%- if page.editSourceFileUrl %}
	readonly editSourceFileUrl: string = '{{ page.editSourceFileUrl }}';
	{%- endif %}

	{%- if page.viewSourceFileUrl %}
	readonly viewSourceFileUrl: string = '{{ page.viewSourceFileUrl }}';
	{%- endif %}

	{%- if page.pageDependencies %}
	readonly dependencies?: NgDocDependencies = pageDependencies;
	{%- endif %}

	{%- if page.componentsAssets %}
	readonly demoAssets: NgDocDemoAssets = demoAssets;
	{%- endif %}

	constructor() {
		super();
	}
}

@NgModule({
	declarations: [DynamicComponent],
	imports: [
		CommonModule,
		NgDocPageModule,
		{%- if page.pageDependencies %}
		pageDependencies.module,
		PlaygroundsModule,
		{%- endif %}
		RouterModule.forChild([{
			path: '',
			component: DynamicComponent,
			title: '{{ page.title }}',
		}]),
	],
	exports: [RouterModule]
})
export class DynamicModule {
}

