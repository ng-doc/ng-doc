// @ts-nocheck
import {Component, NgModule, ChangeDetectionStrategy} from '@angular/core';
import {RouterModule} from '@angular/router';
import {CommonModule} from '@angular/common';
import {NgDocPageComponent, NgDocRootPage, NgDocDemoAssets} from '@ng-doc/app';
import {NgDocPage, NgDocPageType, isRoute} from '@ng-doc/core';
import pageEntity from '{{ page.importPath }}';
import {PlaygroundsModule} from './playgrounds';
import demoAssets from './demo-assets';

const pageContent: string = `{{ pageContent | toTemplateString }}`


@Component({
	selector: 'ng-doc-page-{{ page.fullRoute | kebabCase }}',
	template: `<ng-doc-page></ng-doc-page>`,
	changeDetection: ChangeDetectionStrategy.OnPush,
	standalone: true,
	imports: [
		NgDocPageComponent,
		{%- if page.hasImports %}
		...pageEntity.imports,
		{%- endif %}
		PlaygroundsModule,
	],
	providers: [{provide: NgDocRootPage, useExisting: DynamicComponent}],
})
export class DynamicComponent extends NgDocRootPage {
	readonly routePrefix: string = '{{ page.context.config.routePrefix }}';
	readonly pageType: NgDocPageType = 'guide';
	readonly pageContent: string = pageContent;

	{%- if page.editSourceFileUrl %}
	readonly editSourceFileUrl: string = '{{ page.editSourceFileUrl }}';
	{%- endif %}

	{%- if page.viewSourceFileUrl %}
	readonly viewSourceFileUrl: string = '{{ page.viewSourceFileUrl }}';
	{%- endif %}

	readonly page?: NgDocPage = pageEntity;
	readonly demoAssets: NgDocDemoAssets = demoAssets;

	constructor() {
		super();
	}
}

@NgModule({
	imports: [
		CommonModule,
		RouterModule.forChild([{
			...(isRoute(pageEntity.route) ? pageEntity.route : {}),
			path: '',
			component: DynamicComponent,
			title: `{{ page.title | toTemplateString }}`,
		}]),
	],
	providers: pageEntity.providers,
	exports: [RouterModule]
})
export class DynamicModule {
}

